// Generated by gencpp from file teb_local_planner/FeedbackMsg.msg
// DO NOT EDIT!


#ifndef TEB_LOCAL_PLANNER_MESSAGE_FEEDBACKMSG_H
#define TEB_LOCAL_PLANNER_MESSAGE_FEEDBACKMSG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <teb_local_planner/TrajectoryMsg.h>
#include <geometry_msgs/PolygonStamped.h>

namespace teb_local_planner
{
template <class ContainerAllocator>
struct FeedbackMsg_
{
  typedef FeedbackMsg_<ContainerAllocator> Type;

  FeedbackMsg_()
    : header()
    , trajectories()
    , selected_trajectory_idx(0)
    , obstacles()  {
    }
  FeedbackMsg_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , trajectories(_alloc)
    , selected_trajectory_idx(0)
    , obstacles(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::vector< ::teb_local_planner::TrajectoryMsg_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::teb_local_planner::TrajectoryMsg_<ContainerAllocator> >::other >  _trajectories_type;
  _trajectories_type trajectories;

   typedef uint16_t _selected_trajectory_idx_type;
  _selected_trajectory_idx_type selected_trajectory_idx;

   typedef std::vector< ::geometry_msgs::PolygonStamped_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::geometry_msgs::PolygonStamped_<ContainerAllocator> >::other >  _obstacles_type;
  _obstacles_type obstacles;




  typedef boost::shared_ptr< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> const> ConstPtr;

}; // struct FeedbackMsg_

typedef ::teb_local_planner::FeedbackMsg_<std::allocator<void> > FeedbackMsg;

typedef boost::shared_ptr< ::teb_local_planner::FeedbackMsg > FeedbackMsgPtr;
typedef boost::shared_ptr< ::teb_local_planner::FeedbackMsg const> FeedbackMsgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::teb_local_planner::FeedbackMsg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace teb_local_planner

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/indigo/share/geometry_msgs/cmake/../msg'], 'teb_local_planner': ['/home/rabot/catkin_ws/src/teb_local_planner/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "f0ca746a67d34e8b00ad2e5fcd06d909";
  }

  static const char* value(const ::teb_local_planner::FeedbackMsg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xf0ca746a67d34e8bULL;
  static const uint64_t static_value2 = 0x00ad2e5fcd06d909ULL;
};

template<class ContainerAllocator>
struct DataType< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "teb_local_planner/FeedbackMsg";
  }

  static const char* value(const ::teb_local_planner::FeedbackMsg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message that contains intermediate results \n\
# and diagnostics of the (predictive) planner.\n\
\n\
std_msgs/Header header\n\
\n\
# The planned trajectory (or if multiple plans exist, all of them)\n\
teb_local_planner/TrajectoryMsg[] trajectories\n\
\n\
# Index of the trajectory in 'trajectories' that is selected currently\n\
uint16 selected_trajectory_idx\n\
\n\
# List of active obstacles\n\
geometry_msgs/PolygonStamped[] obstacles\n\
\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: teb_local_planner/TrajectoryMsg\n\
# Message that contains a trajectory for mobile robot navigation\n\
\n\
std_msgs/Header header\n\
teb_local_planner/TrajectoryPointMsg[] trajectory\n\
\n\
\n\
\n\
================================================================================\n\
MSG: teb_local_planner/TrajectoryPointMsg\n\
# Message that contains single point on a trajectory suited for mobile navigation.\n\
# The trajectory is described by a sequence of poses, velocities,\n\
# accelerations and temporal information.\n\
\n\
# Why this message type?\n\
# nav_msgs/Path describes only a path without temporal information.\n\
# trajectory_msgs package contains only messages for joint trajectories.\n\
\n\
# The pose of the robot\n\
geometry_msgs/Pose pose\n\
\n\
# Corresponding velocity\n\
geometry_msgs/Twist velocity\n\
\n\
# Corresponding acceleration\n\
geometry_msgs/Twist acceleration\n\
\n\
duration time_from_start\n\
\n\
\n\
\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Twist\n\
# This expresses velocity in free space broken into its linear and angular parts.\n\
Vector3  linear\n\
Vector3  angular\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Vector3\n\
# This represents a vector in free space. \n\
# It is only meant to represent a direction. Therefore, it does not\n\
# make sense to apply a translation to it (e.g., when applying a \n\
# generic rigid transformation to a Vector3, tf2 will only apply the\n\
# rotation). If you want your data to be translatable too, use the\n\
# geometry_msgs/Point message instead.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
================================================================================\n\
MSG: geometry_msgs/PolygonStamped\n\
# This represents a Polygon with reference coordinate frame and timestamp\n\
Header header\n\
Polygon polygon\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Polygon\n\
#A specification of a polygon where the first and last points are assumed to be connected\n\
Point32[] points\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point32\n\
# This contains the position of a point in free space(with 32 bits of precision).\n\
# It is recommeded to use Point wherever possible instead of Point32.  \n\
# \n\
# This recommendation is to promote interoperability.  \n\
#\n\
# This message is designed to take up less space when sending\n\
# lots of points at once, as in the case of a PointCloud.  \n\
\n\
float32 x\n\
float32 y\n\
float32 z\n\
";
  }

  static const char* value(const ::teb_local_planner::FeedbackMsg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.trajectories);
      stream.next(m.selected_trajectory_idx);
      stream.next(m.obstacles);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FeedbackMsg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teb_local_planner::FeedbackMsg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::teb_local_planner::FeedbackMsg_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "trajectories[]" << std::endl;
    for (size_t i = 0; i < v.trajectories.size(); ++i)
    {
      s << indent << "  trajectories[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::teb_local_planner::TrajectoryMsg_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectories[i]);
    }
    s << indent << "selected_trajectory_idx: ";
    Printer<uint16_t>::stream(s, indent + "  ", v.selected_trajectory_idx);
    s << indent << "obstacles[]" << std::endl;
    for (size_t i = 0; i < v.obstacles.size(); ++i)
    {
      s << indent << "  obstacles[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::geometry_msgs::PolygonStamped_<ContainerAllocator> >::stream(s, indent + "    ", v.obstacles[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEB_LOCAL_PLANNER_MESSAGE_FEEDBACKMSG_H
